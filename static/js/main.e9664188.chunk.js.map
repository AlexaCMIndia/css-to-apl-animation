{"version":3,"sources":["convert.js","App.js","index.js"],"names":["css","require","R","parse","data","Promise","fulfill","reject","toString","silent","err","parseTransformString","result","apl","i","match","c","shift","translate","length","translate3d","translateX","translateY","scale","parseFloat","scale3d","scaleX","scaleY","rotate","rotate3d","rotateX","rotateY","skew","skewX","skewY","grouped","JSON","stringify","filter","group","Object","keys","module","exports","convert","resolve","then","isStylesheet","type","hasNoParsingErrors","stylesheet","parsingErrors","hasKeyframes","any","rule","rules","map","console","log","Error","validate","getContentOfKeyframes","pipe","converge","vals","declarations","cond","equals","always","T","divide","__","reduce","merge","objOf","prop","offsets","transf","nth","transformAST","path","propEq","keyframe","name","content","keyframes","zipObj","flatten","orderByOffset","sortBy","mapKeys","curry","fn","obj","fromPairs","adjust","toPairs","str","replace","m","toUpperCase","ease","dissoc","assoc","process","processAST","version","commands","commandbase","parameters","forEach","value","command","assign","transform","offset","animateitem","duration","delay","undefined","easing","Math","round","push","property","from","to","opacity","Number","convertToAPL","DEFAULT_STYLE","App","useState","setKeyframe","setAPL","useEffect","className","onChange","e","target","onClick","ReactDOM","render","StrictMode","document","getElementById","serviceWorker"],"mappings":"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","file":"static/js/main.e9664188.chunk.js","sourcesContent":["/* Based on https://github.com/gibbok/keyframes-tool */\r\n\r\nconst css = require('css');\r\nconst R = require('ramda');\r\n\r\n/**\r\n * Parse content of CSS input file and create an AST tree.\r\n */\r\nlet parse = data => {\r\n    return new Promise((fulfill, reject) => {\r\n        try {\r\n            let parsedData = css.parse(data.toString(), { silent: false });\r\n            fulfill(parsedData);\r\n        } catch (err) {\r\n            reject(err);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Validate AST tree content.\r\n */\r\nlet validate = data => {\r\n    return new Promise((fulfill, reject) => {\r\n        try {\r\n            let isStylesheet = data.type === 'stylesheet',\r\n                hasNoParsingErrors = 'stylesheet' in data && data.stylesheet.parsingErrors.length === 0,\r\n                hasKeyframes = R.any((rule) => rule.type === 'keyframes', data.stylesheet.rules);\r\n            if (!isStylesheet || !hasNoParsingErrors || !hasKeyframes) {\r\n                if (!isStylesheet) {\r\n                    throw 'ast is not of type stylesheet';\r\n                }\r\n                if (!hasNoParsingErrors) {\r\n                    R.map(err => console.log(new Error(`error: ${err}`)), data.stylesheet.parsingErrors);\r\n                    throw 'file has parse error';\r\n                }\r\n                if (!hasKeyframes) {\r\n                    throw 'no keyframes rules found';\r\n                }\r\n            }\r\n            fulfill(data);\r\n        } catch (err) {\r\n            reject(err);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Process AST tree content and a new data structure valid for Web Animation API KeyframeEffect.\r\n * The following code uses Ramda.js for traversing a complex AST tree,\r\n * an alternative and simplified version is visible at http://codepen.io/gibbok/pen/PbRrxp\r\n */\r\nlet processAST = data => {\r\n    return new Promise((fulfill, reject) => {\r\n        try {\r\n            let processKeyframe = (vals, declarations) => [\r\n                // map each value\r\n                R.map(R.cond([\r\n                    [R.equals('from'), R.always(\"0\")],\r\n                    [R.equals('to'), R.always(\"1\")],\r\n                    [R.T, R.pipe(\r\n                        // covert `offset` to a string representing a decimal point\r\n                        parseFloat, R.divide(R.__, 100),\r\n                        R.toString()\r\n                    )]\r\n                ]), vals),\r\n                // collect all property value pairs and merge in one object\r\n                R.reduce(R.merge, {},\r\n                    R.map(R.converge(R.objOf, [\r\n                        R.prop('property'),\r\n                        R.prop('value')\r\n                    ]), declarations))\r\n            ];\r\n\r\n            let processAnimation = (offsets, transf) =>\r\n                // process offset property\r\n                R.map(R.pipe(\r\n                    R.objOf('offset'),\r\n                    R.merge(transf)), offsets);\r\n\r\n            let getContentOfKeyframes = R.map(R.pipe(\r\n                // process keyframes\r\n                R.converge(processKeyframe, [\r\n                    R.prop('values'),\r\n                    R.prop('declarations')\r\n                ]),\r\n                // process animations\r\n                R.converge(processAnimation, [\r\n                    R.nth(0),\r\n                    R.nth(1)\r\n                ])));\r\n\r\n            let transformAST = R.pipe(\r\n                // get `stylesheet.rules` property\r\n                R.path(['stylesheet', 'rules']),\r\n                // get only object whose `type` property is `keyframes`\r\n                R.filter(R.propEq('type', 'keyframes')),\r\n                // map each item in `keyframes` collection\r\n                // to an object `{name: keyframe.name, content: [contentOfkeyframes] }`\r\n                R.map((keyframe) => ({\r\n                    name: keyframe.name,\r\n                    content: getContentOfKeyframes(keyframe.keyframes)\r\n                })),\r\n                // make a new object using animation `name` as keys\r\n                // and using a flatten content as values\r\n                R.converge(R.zipObj, [\r\n                    R.map(R.prop('name')),\r\n                    R.map(R.pipe(R.prop('content'), R.flatten))\r\n                ])\r\n            );\r\n\r\n            // order by property `offset` ascending\r\n            let orderByOffset = R.map(R.pipe(R.sortBy(R.prop('offset'))));\r\n\r\n            // convert hyphenated properties to camelCase\r\n            let convertToCamelCase = data => {\r\n                let mapKeys = R.curry((fn, obj) =>\r\n                    R.fromPairs(R.map(R.adjust(fn, 0), R.toPairs(obj)))\r\n                ),\r\n                    camelCase = (str) => str.replace(/[-_]([a-z])/g, (m) => m[1].toUpperCase())\r\n                return R.map(R.map(mapKeys(camelCase)), data)\r\n            };\r\n\r\n            // convert `animationTimingFunction` to `easing` for compatibility with web animations api\r\n            // and assign `easing` default value to `ease` when `animation-timing-function` from css file is not provided\r\n            let convertToEasing = data => {\r\n                const convert = data => {\r\n                    const ease = R.prop('animationTimingFunction', data);\r\n                    return R.dissoc('animationTimingFunction', R.assoc('easing', ease, data));\r\n                };\r\n                let result = R.map(R.map(convert))(data);\r\n                return result;\r\n            };\r\n\r\n            // process\r\n            let process = R.pipe(\r\n                transformAST,\r\n                orderByOffset,\r\n                convertToCamelCase,\r\n                convertToEasing\r\n            );\r\n            let result = process(data);\r\n            fulfill(result);\r\n        } catch (err) {\r\n            reject(err);\r\n        }\r\n    });\r\n};\r\n\r\nlet parseTransformString = data => {\r\n    let result = {}, apl = {};\r\n    for (var i in data = data.match(/(\\w+\\((\\s*\\-?\\w+\\%*\\.?\\w*e?\\-?\\w*,?)+\\))+/g))\r\n    {\r\n        let c = data[i].match(/[\\w\\.\\-\\%]+/g);\r\n        result[c.shift()] = c;\r\n    }\r\n    if(result.translate){\r\n        apl['translateX'] = result.translate[0];\r\n        apl['translateY'] = result.translate.length === 1 ? result.translate[0] : result.translate[1];\r\n    }\r\n    if(result.translate3d){\r\n        apl['translateX'] = result.translate3d[0];\r\n        apl['translateY'] = result.translate3d[1];\r\n    }\r\n    if(result.translateX){\r\n        apl['translateX'] = result.translateX[0];\r\n    }\r\n    if(result.translateY){\r\n        apl['translateY'] = result.translateY[0];\r\n    }\r\n    if(result.scale){\r\n        apl['scaleX'] = parseFloat(result.scale[0]);\r\n        apl['scaleY'] = result.scale.length === 1 ? parseFloat(result.scale[0]) : parseFloat(result.scale[1]);\r\n    }\r\n    if(result.scale3d){\r\n        apl['scaleX'] = parseFloat(result.scale3d[0]);\r\n        apl['scaleY'] = parseFloat(result.scale3d[1]);\r\n    }\r\n    if(result.scaleX){\r\n        apl['scaleX'] = parseFloat(result.scaleX[0]);\r\n    }\r\n    if(result.scaleY){\r\n        apl['scaleY'] = parseFloat(result.scaleY[0]);\r\n    }\r\n    if(result.rotate){\r\n        apl['rotate'] = parseFloat(result.rotate[0]);\r\n    }\r\n    if(result.rotate3d){\r\n        if(result.rotate3d[2] === \"1\")\r\n            apl['rotate'] = parseFloat(result.rotate3d[3]);\r\n    }\r\n    if(result.rotateX){\r\n        apl['rotate'] = parseFloat(result.rotateX[0]);\r\n    }\r\n    if(result.rotateY){\r\n        apl['rotate'] = parseFloat(result.rotateY[0]);\r\n    }\r\n    if(result.skew){\r\n        apl['skewX'] = parseFloat(result.skew[0]);\r\n        apl['skewY'] = parseFloat(result.skew[1]);\r\n    }\r\n    if(result.skewX){\r\n        apl['skewX'] = parseFloat(result.skewX[0]);\r\n    }\r\n    if(result.skewY){\r\n        apl['skewY'] = parseFloat(result.skewY[0]);\r\n    }\r\n    let grouped = [\r\n        {\r\n            translateX: apl.translateX,\r\n            translateY: apl.translateY\r\n        },\r\n        {\r\n            rotate: apl.rotate\r\n        },\r\n        {\r\n            scaleX: apl.scaleX,\r\n            scaleY: apl.scaleY\r\n        },\r\n        {\r\n            skewX: apl.skewX,\r\n            skewY: apl.skewY\r\n        }\r\n    ];\r\n    grouped = JSON.parse(JSON.stringify(grouped));\r\n    return grouped.filter(group => Object.keys(group).length > 0);\r\n}\r\n\r\nfunction fixDecimalPrecision(value){\r\n    return Math.round((value) * 1000) / 1000\r\n}\r\n\r\nlet convertToAPL = data => {\r\n    let apl = {\r\n        type: \"APL\",\r\n        version: \"1.1.0\",\r\n        commands: {}\r\n    };\r\n    let commandbase = {\r\n        parameters: [\r\n            \"duration\",\r\n            \"delay\"\r\n        ],\r\n        commands: []\r\n    };\r\n    Object.keys(data).forEach(name => {\r\n        let command = Object.assign({}, commandbase);\r\n        let css = data[name];\r\n        command.commands = [];\r\n        for(let i = 0; i < css.length; i++){\r\n            if(css[i].transform)\r\n                css[i].transform = parseTransformString(css[i].transform);\r\n            if(css[i].offset)\r\n                css[i].offset = parseFloat(css[i].offset);\r\n        }\r\n        for(let i = 0; i < css.length; i++){\r\n            if(css[i].offset === 0) continue;\r\n            let animateitem = {\r\n                type: \"AnimateItem\",\r\n                duration: `\\${duration * ${css[i].offset}}`,\r\n                delay: command.commands.length === 0 ? \"${delay || 0}\" : undefined,\r\n                easing: css[i].easing,\r\n                value: []\r\n            };\r\n            if(i === 0) animateitem.duration = `\\${duration * ${css[i].offset}}`;\r\n            else animateitem.duration = `\\${duration * ${fixDecimalPrecision(css[i].offset - css[i - 1].offset)}}`;\r\n            if(i > 0){\r\n                if(css[i].transform){\r\n                    animateitem.value.push({\r\n                        property: \"transform\",\r\n                        from: css[i - 1].transform,\r\n                        to: css[i].transform\r\n                    });\r\n                }\r\n                if(css[i].opacity){\r\n                    animateitem.value.push({\r\n                        property: \"opacity\",\r\n                        from: Number(css[i - 1].opacity),\r\n                        to: Number(css[i].opacity)\r\n                    });\r\n                }\r\n            }\r\n            command.commands.push(animateitem);\r\n        }\r\n        apl.commands[name] = command;\r\n    });\r\n    return Promise.resolve(apl);\r\n}\r\n\r\n/**\r\n * Initiate conversion process.\r\n */\r\nlet convert = ({ css }) => {\r\n    return Promise.resolve(css)\r\n    .then(data => {\r\n        return parse(data);\r\n    }).then(data => {\r\n        return validate(data);\r\n    }).then(data => {\r\n        return processAST(data);\r\n    }).then(data => {\r\n        return convertToAPL(data);\r\n    }).then(data => {\r\n        return data;\r\n    })\r\n};\r\n\r\nmodule.exports = { convert };","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { convert } from \"./convert\";\n\nconst DEFAULT_STYLE = `\n@keyframes bounce {\n  from,\n  20%,\n  53%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    transform: translate3d(0, 0, 0);\n  }\n\n  40%,\n  43% {\n    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n    transform: translate3d(0, -30px, 0) scaleY(1.1);\n  }\n\n  70% {\n    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n    transform: translate3d(0, -15px, 0) scaleY(1.05);\n  }\n\n  80% {\n    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    transform: translate3d(0, 0, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -4px, 0) scaleY(1.02);\n  }\n}\n@keyframes rubberBand {\n  from {\n    transform: scale3d(1, 1, 1);\n  }\n\n  30% {\n    transform: scale3d(1.25, 0.75, 1);\n  }\n\n  40% {\n    transform: scale3d(0.75, 1.25, 1);\n  }\n\n  50% {\n    transform: scale3d(1.15, 0.85, 1);\n  }\n\n  65% {\n    transform: scale3d(0.95, 1.05, 1);\n  }\n\n  75% {\n    transform: scale3d(1.05, 0.95, 1);\n  }\n\n  to {\n    transform: scale3d(1, 1, 1);\n  }\n}\n`\n\nfunction App() {\n  const [keyframe, setKeyframe] = useState(DEFAULT_STYLE);\n  const [apl, setAPL] = useState(null);\n  useEffect(() => {\n    convert({ css: DEFAULT_STYLE })\n    .then(apl => {\n      setAPL(JSON.stringify(apl, null, 4));\n    })\n  }, []);\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>CSS to APL</h1>\n        <h2>(Convert css keyframes to apl animation)</h2>\n      </div>\n      <div className=\"container\">\n        <div className=\"edit\">\n          <textarea value={keyframe} onChange={e => {\n            setKeyframe(e.target.value);\n          }} />\n        </div>\n        <div className=\"action\">\n          <button onClick={e => {\n            convert({ css: keyframe })\n            .then(apl => {\n              setAPL(JSON.stringify(apl, null, 4));\n            })\n          }}>Convert</button>\n        </div>\n        <div className=\"edit\">\n          <textarea value={apl} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}